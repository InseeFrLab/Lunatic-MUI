name: Lunatic MUI CI

on: [push]

jobs:
  build:
    name: Test & build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 15
      - run: yarn
      # Build lib
      - run: yarn build

  build-assets:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            resources:
              - 'docs/**'
              - 'src/stories/**'
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 15
      - run: yarn
      # Build Storybook
      - run: yarn build-storybook
      - run: mkdir -p deploy/storybook
      - run: cp -R ./built-storybook/storybook/. ./deploy/storybook
      - uses: actions/setup-node@v1
        with:
          # Because of gitbook support
          node-version: 10
      - run: |
          npm i -g gitbook-cli
          gitbook install
          gitbook build
        working-directory: ./docs/
      - run: cp -a ./docs/_book/. ./deploy/
      # Build orchestrator example
      - name: Upload deploy artifact
        uses: actions/upload-artifact@v2
        with:
          name: deploy
          path: deploy/

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-assets
    steps:
      - name: Download deploy artifact
        uses: actions/download-artifact@v2
        with:
          name: deploy
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .

  check_if_version_upgraded:
    name: Check if version upgrade
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build
    outputs:
      from_version: ${{ steps.step1.outputs.from_version }}
      to_version: ${{ steps.step1.outputs.to_version }}
      is_upgraded_version: ${{steps.step1.outputs.is_upgraded_version }}
    steps:
      - uses: garronej/github_actions_toolkit@v2.2
        id: step1
        with:
          action_name: is_package_json_version_upgraded

  update_changelog:
    runs-on: ubuntu-latest
    needs: check_if_version_upgraded
    if: needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true'
    steps:
      - uses: garronej/github_actions_toolkit@v2.2
        with:
          action_name: update_changelog
          branch: ${{ github.ref }}
          commit_author_email: ts_ci@github.com

  create_github_release:
    runs-on: ubuntu-latest
    needs:
      - update_changelog
      - check_if_version_upgraded
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Build GitHub release body
        id: step1
        run: |
          if [ "$FROM_VERSION" = "0.0.0" ]; then
              echo "::set-output name=body::ðŸš€"
          else
              echo "::set-output name=body::ðŸ“‹ [CHANGELOG](https://github.com/$GITHUB_REPOSITORY/blob/v$TO_VERSION/CHANGELOG.md)"
          fi
        env:
          FROM_VERSION: ${{ needs.check_if_version_upgraded.outputs.from_version }}
          TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
      - uses: garronej/action-gh-release@v0.2.0
        with:
          name: Release v${{ needs.check_if_version_upgraded.outputs.to_version }}
          tag_name: v${{ needs.check_if_version_upgraded.outputs.to_version }}
          target_commitish: ${{ github.ref }}
          body: ${{ steps.step1.outputs.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_on_npm:
    runs-on: ubuntu-latest
    needs:
      - update_changelog
      - check_if_version_upgraded
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-node@v2.1.3
        with:
          node-version: '15'
          registry-url: https://registry.npmjs.org/
      - run: |
          PACKAGE_MANAGER=npm
          if [ -f "./yarn.lock" ]; then
              PACKAGE_MANAGER=yarn
          fi
          if [ "$PACKAGE_MANAGER" = "yarn" ]; then
              yarn install --frozen-lockfile                                                                                                                                                                                        
          else
              npm ci
          fi
          $PACKAGE_MANAGER run build
      - run: npx -y -p denoify@0.6.5 denoify_enable_short_npm_import_path
        env:
          DRY_RUN: '0'
      - name: Publishing on NPM
        run: |
          if [ "$(npm show . version)" = "$VERSION" ]; then
            echo "This version is already published"
            exit 0
          fi
          if [ "$NODE_AUTH_TOKEN" = "" ]; then
            echo "Can't publish on NPM, You must first create a secret called NPM_TOKEN that contains your NPM auth token. https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets"
            false
          fi
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
          VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
